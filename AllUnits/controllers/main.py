# from tree import *
# from testing import *
from graph import *
'''
import importlib
tree_module = input('tree')
importlib.import_module(tree_module)
'''
text = """Проходные баллы по направлению подготовки бакалавриата и специалитета за 2020, 2021, 2022, 2023 год.
    Правила приема в ДВФУ на обучение по программам бакалавриата в 2023 году определяют особенности приема в федеральное государственное автономное образовательное учреждение высшего образования Дальневосточный федеральный университет / ДВФУ / Университет.
    Правила приема в ДВФУ на обучение по программам специалитета в 2023 году определяют особенности приема в федеральное государственное автономное образовательное учреждение высшего образования Дальневосточный федеральный университет / ДВФУ / Университет.
    Правила приема в ДВФУ на обучение по программам магистратуры в 2023 году определяют особенности приема в федеральное государственное автономное образовательное учреждение высшего образования Дальневосточный федеральный университет / ДВФУ / Университет.
    Правила приема в ДВФУ на обучение по программам подготовки научных кадров в аспирантуре в 2023 году определяют особенности приема в федеральное государственное автономное образовательное учреждение высшего образования Дальневосточный федеральный университет / ДВФУ / Университет.
    Правила приема в ДВФУ на обучение по программам подготовки научно-педагогических кадров в аспирантуре в 2023 году определяют особенности приема в федеральное государственное автономное образовательное учреждение высшего образования Дальневосточный федеральный университет / ДВФУ / Университет.
    Правила приема в ДВФУ в 2023 году определяют особенности приема на первый курс в 2023/2024 учебном году на места в рамках контрольных цифр приема на обучение за счет бюджетных ассигнований федерального бюджета и по договорам об образовании, заключаемым при приеме на обучение за счет средств физических или юридических лиц.
    Правила приема в ДВФУ в 2023 году определяют особенности приема на первый курс в 2023/2024 учебном году на обучение за счет бюджетных ассигнований федерального бюджета и по договорам об образовании для следующих категорий граждан: обучавшихся в организациях осуществляющих образовательную деятельность, завершивших освоение образовательных программ среднего общего образования и успешно прошедших государственную итоговую аттестацию, проходивших обучение за рубежом и вынужденных прервать его в связи с недружественными действиями иностранных государств.
    Обучавшихся в организациях осуществляющих образовательную деятельность, расположенных на территориях Донецкой Народной Республики, Луганской Народной Республики, Запорожской области, Херсонской области.
    Завершивших освоение образовательных программ среднего общего образования и успешно прошедших государственную итоговую аттестацию на территориях Донецкой Народной Республики, Луганской Народной Республики, Запорожской области, Херсонской области.
    Проходивших обучение за рубежом и вынужденных прервать его в связи с недружественными действиями иностранных государств, на основании частей 7 и 8 статьи 5 Федерального закона от 17 февраля 2023 г. № 19-ФЗ «Об особенностях правового регулирования отношений в сферах образования и науки», а также постановления Правительства Российской Федерации от 3 апреля 2023 г. № 528 «Об утверждении особенностей приема на обучение по образовательным программам высшего образования в 2023 году».
    """


def main():
    graph = init_graph()
    graph = graph_nlp_text(graph, text)

    print(graph.edges)


    # main_scene = Scene(intents=['главный'], int_values=['значение'], name='main', answer=['a', 'intent', 'b'],
    #                    pass_conditions=[['pass']])
    # # 'intent' менять на list intents
    # sub1 = Scene(intents=['первый'], int_values=['значение'], name='sub1', pass_conditions=[['one']])
    # sub2 = Scene(intents=['второй'], int_values=['значение'], name='sub2', pass_conditions=[['two'], ['three']])
    # sub12 = Scene(intents=['первый второй'], int_values=['значение'], name='sub12', pass_conditions=[['four']])
    # tree = SceneTree(main_scene)
    # main_scene.add_child(sub1)
    # main_scene.add_child(sub2)
    # sub1.add_child(sub12)
    # tree.set_height_tree()
    # main_scene.print_scene()
    # tree.print_nodes()
    # print('---')
    # tree.print_pretty_nodes()
    # # main_scene.print_answer()

    # '''
    # tree = ET.parse('info.xml')
    # root = tree.getroot()
    # to_print = root.findall("intent")
    # for tag in to_print:
    #     print(tag.text)
    # '''

    # # sg.Window(title="tree_print", layout=[[]], margins=(200, 100)).read()
    # # window_tree(tree)

    # cur_intents = ['pass', 'one', 'two', 'three']
    # next_scene = main_scene.conv_continue(cur_intents)
    # # next_scene.print_scene()

    # tree.start_conversation()

    # # automatic_testing()

    # return 0


if __name__ == '__main__':
    main()
